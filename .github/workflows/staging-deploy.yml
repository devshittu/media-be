name: Deploy to Staging on GKE

on:
  push:
    branches:
      - staging # Triggers the workflow on pushes to the staging branch
  workflow_dispatch: # Allows manual triggering of the workflow from GitHub UI

env:
  GCP_REGION: ${{ secrets.GKE_REGION }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  ARTIFACT_REGISTRY: ${{ secrets.ARTIFACT_REGISTRY }}
  DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}

jobs:
  setup:
    name: Setup and Configure Environment
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          service_account_key: ${{ secrets.GKE_KEY }}
          export_default_credentials: true

      - name: Install GKE gcloud auth plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Configure kubectl for GKE
        run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GKE_PROJECT }}

      - name: Create Namespace if it doesn't exist
        run: |
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Namespace
          metadata:
            name: staging
            labels:
              app.kubernetes.io/managed-by: "Helm"
            annotations:
              meta.helm.sh/release-name: "web-app"
              meta.helm.sh/release-namespace: "staging"
          EOF

      - name: Set Default Namespace
        run: kubectl config set-context --current --namespace=staging # Sets the default namespace for subsequent kubectl commands
      - name: Debug secrets
        run: |
          echo "Length of DJANGO_SECRET_KEY: #${{ secrets.DJANGO_SECRET_KEY }} "
          echo "Length of POSTGRES_PASSWORD: #${{ secrets.POSTGRES_PASSWORD }} "
          # Add similar echo statements for other secrets

  build-and-push:
    name: Build and Push Docker Image
    needs: setup
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GKE_KEY }}

      - name: Build Docker image
        run: |
            docker build -t ${{ secrets.ARTIFACT_REGISTRY }}/web-app-image:${{ github.sha }} -t ${{ secrets.ARTIFACT_REGISTRY }}/web-app-image:latest -f Dockerfile.dev .
        # Make sure the Dockerfile.dev path is correct; add subdirectory path if it's not in the root

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west2-docker.pkg.dev

      - name: Push Docker image to Artifact Registry
        run: |
          docker tag ${{ secrets.ARTIFACT_REGISTRY }}/web-app-image:${{ github.sha }} ${{ secrets.ARTIFACT_REGISTRY }}/web-app-image:latest
          docker push ${{ secrets.ARTIFACT_REGISTRY }}/web-app-image:${{ github.sha }}
          docker push ${{ secrets.ARTIFACT_REGISTRY }}/web-app-image:latest

  deploy-databases:
      name: Deploy Databases
      needs: build-and-push
      runs-on: ubuntu-latest
      environment: staging
      steps:
        - name: Checkout the repository
          uses: actions/checkout@v2


        - name: Set up Google Cloud SDK
          uses: google-github-actions/setup-gcloud@v0.2.0
          with:
            project_id: ${{ secrets.GKE_PROJECT }}
            service_account_email: ${{ secrets.GKE_EMAIL }}
            service_account_key: ${{ secrets.GKE_KEY }}
            export_default_credentials: true

        - name: Install GKE gcloud auth plugin
          run: gcloud components install gke-gcloud-auth-plugin

        - name: Configure kubectl for GKE
          run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GKE_PROJECT }}

        - name: Use variables for DB
          env:
            REPOSITORY_VAR: ${{ vars.REPOSITORY_VAR }}
            ORGANIZATION_VAR: ${{ vars.ORGANIZATION_VAR }}
            OVERRIDE_VAR: ${{ vars.OVERRIDE_VAR }}
            POSTS_PER_PAGE: ${{ vars.POSTS_PER_PAGE }}
            env_var: ${{ vars.ENV_CONTEXT_VAR }}
          run: |
            echo "repository variable : $REPOSITORY_VAR"
            echo "organization variable : $ORGANIZATION_VAR"
            echo "overridden variable : $OVERRIDE_VAR"
            echo "POSTS_PER_PAGE variable : $POSTS_PER_PAGE"
            echo "variable from shell environment : $env_var"
            echo "variable from shell environment vars.POSTGRES_HOST : ${{ vars.POSTGRES_HOST }}"
            echo "variables from shell environment vars.JOB_NAME : ${{ vars.JOB_NAME }}"
            echo "all variables from shell environment vars : ${{ vars }}"

        - name: Create Kubernetes Secrets for Web App and Database
          run: |
            kubectl create secret generic web-app-secret \
              --from-literal=APP_NAME='${{ vars.APP_NAME }}' \
              --from-literal=APP_CODE_NAME='${{ vars.APP_CODE_NAME }}' \
              --from-literal=APP_VERSION='${{ vars.APP_VERSION }}' \
              --from-literal=APP_DESCRIPTION='${{ vars.APP_DESCRIPTION }}' \
              --from-literal=APP_FRONTEND_DOMAIN='${{ vars.APP_FRONTEND_DOMAIN }}' \
              --from-literal=APP_BASE_URL='${{ vars.APP_BASE_URL }}' \
              --from-literal=DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}' \
              --from-literal=DJANGO_DEBUG='${{ secrets.DJANGO_DEBUG }}' \
              --from-literal=DJANGO_SUPERUSER_EMAIL='${{ vars.DJANGO_SUPERUSER_EMAIL }}' \
              --from-literal=DJANGO_SUPERUSER_PASSWORD='${{ vars.DJANGO_SUPERUSER_PASSWORD }}' \
              --from-literal=DJANGO_SUPERUSER_USERNAME='${{ vars.DJANGO_SUPERUSER_USERNAME }}' \
              --from-literal=DJANGO_SUPERUSER_DISPLAY_NAME='${{ vars.DJANGO_SUPERUSER_DISPLAY_NAME }}' \
              --from-literal=DJANGO_SUPERUSER_AVATAR_URL='${{ vars.DJANGO_SUPERUSER_AVATAR_URL }}' \
              --from-literal=DJANGO_SUPERUSER_HAS_COMPLETED_SETUP='${{ vars.DJANGO_SUPERUSER_HAS_COMPLETED_SETUP }}' \
              --from-literal=DJANGO_ALLOWED_HOSTS='${{ vars.DJANGO_ALLOWED_HOSTS }}' \
              --from-literal=APP_MEDIA_ENVIRONMENT='${{ vars.APP_MEDIA_ENVIRONMENT }}' \
              --from-literal=TWILIO_ACCOUNT_SID='${{ secrets.TWILIO_ACCOUNT_SID }}' \
              --from-literal=TWILIO_AUTH_TOKEN='${{ secrets.TWILIO_AUTH_TOKEN }}' \
              --from-literal=TWILIO_PHONE_NUMBER='${{ secrets.TWILIO_PHONE_NUMBER }}' \
              --from-literal=SECRET_KEY='${{ secrets.SECRET_KEY }}' \
              --from-literal=POSTGRES_DB='${{ vars.POSTGRES_DB }}' \
              --from-literal=POSTGRES_USER='${{ vars.POSTGRES_USER }}' \
              --from-literal=POSTGRES_PASSWORD='${{ vars.POSTGRES_PASSWORD }}' \
              --from-literal=POSTGRES_HOST='${{ vars.POSTGRES_HOST }}' \
              --from-literal=POSTGRES_PORT='${{ vars.POSTGRES_PORT }}' \
              --from-literal=NEO4J_USERNAME='${{ vars.NEO4J_USERNAME }}' \
              --from-literal=NEO4J_PASSWORD='${{ vars.NEO4J_PASSWORD }}' \
              --from-literal=NEO4J_AUTH='${{ vars.NEO4J_AUTH }}' \
              --from-literal=NEO4J_HOST='${{ vars.NEO4J_HOST }}' \
              --from-literal=NEO4J_PORT='${{ vars.NEO4J_PORT }}' \
              --from-literal=REDIS_PASSWORD='${{ vars.REDIS_PASSWORD }}' \
              --from-literal=REDIS_HOST='${{ vars.REDIS_HOST }}' \
              --from-literal=REDIS_PORT='${{ vars.REDIS_PORT }}' \
              --from-literal=CELERY_BROKER_URL='${{ vars.CELERY_BROKER_URL }}' \
              --from-literal=CELERY_RESULT_BACKEND='${{ vars.CELERY_RESULT_BACKEND }}' \
              --from-literal=APP_MEDIA_EMAIL_BACKEND='${{ vars.APP_MEDIA_EMAIL_BACKEND }}' \
              --from-literal=APP_MEDIA_EMAIL_HOST='${{ vars.APP_MEDIA_EMAIL_HOST }}' \
              --from-literal=APP_MEDIA_EMAIL_USE_TLS='${{ vars.APP_MEDIA_EMAIL_USE_TLS }}' \
              --from-literal=APP_MEDIA_EMAIL_PORT='${{ vars.APP_MEDIA_EMAIL_PORT }}' \
              --from-literal=APP_MEDIA_EMAIL_HOST_USER='mshittu.work@gmail.com' \
              --from-literal=APP_MEDIA_EMAIL_HOST_PASSWORD='${{ secrets.APP_MEDIA_EMAIL_HOST_PASSWORD }}' \
              --from-literal=APP_MEDIA_SENDGRID_API_KEY_NAME='${{ vars.APP_MEDIA_SENDGRID_API_KEY_NAME }}' \
              --from-literal=APP_MEDIA_SENDGRID_API_KEY_ID='${{ secrets.APP_MEDIA_SENDGRID_API_KEY_ID }}' \
              --from-literal=APP_MEDIA_SENDGRID_API_KEY='${{ secrets.APP_MEDIA_SENDGRID_API_KEY }}' \
              --from-literal=GS_BUCKET_NAME='${{ vars.GS_BUCKET_NAME }}' \
              --from-literal=GS_CREDENTIALS='${{ secrets.GS_CREDENTIALS }}' \
              --from-literal=GS_PROJECT_ID='${{ secrets.GS_PROJECT_ID }}' \
              --from-literal=POSTS_PER_PAGE='${{ vars.POSTS_PER_PAGE }}' \
              --from-literal=ANCESTORS_PER_PAGE='${{ vars.ANCESTORS_PER_PAGE }}' \
              --from-literal=DESCENDANTS_PER_PAGE='${{ vars.DESCENDANTS_PER_PAGE }}' \
              --namespace staging \
              --dry-run=client -o yaml | kubectl apply -f -

        - name: Deploy Redis
          run: |
            helm repo add bitnami https://charts.bitnami.com/bitnami
            helm repo update
            helm upgrade --install db-redis bitnami/redis -f ./k8s/helms/dbs/redis-values.yaml --namespace staging --create-namespace

        - name: Deploy Postgres
          run: |
            helm upgrade --install db-postgres bitnami/postgresql -f ./k8s/helms/dbs/postgres-values.yaml --namespace staging

        - name: Deploy Neo4j
          run: |
            helm upgrade --install neo4j ./k8s/helms/neo4j --namespace staging

  deploy-application:
    name: Deploy Application
    needs: [build-and-push, deploy-databases]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}
          export_default_credentials: true

      - name: Install GKE gcloud auth plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Configure kubectl for GKE
        run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GKE_PROJECT }}


      - name: Add certificate manager 
        run: |
          # Add the Jetstack Helm repository
          helm repo add jetstack https://charts.jetstack.io

          # Update your Helm repositories
          helm repo update

          # Install cert-manager
          helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.15.1 --set installCRDs=true

      - name: Deploy Web App
        run: |
          helm upgrade --install web-app ./k8s/helms/web-app --namespace staging --set shared.image.tag=${{ github.sha }}
          
      - name: Verify Deployment
        run: kubectl rollout status deployment/web-app -n staging

  database-update:
    name: Database Update
    needs: deploy-application
    runs-on: ubuntu-latest
    environment: staging
    if: github.event_name == 'push' && (github.event.pull_request.merged == true || github.event_name != 'pull_request') && contains(github.event.head_commit.message, '[db-update]')
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GKE_KEY }}

      - name: Run Database Migrations
        run: |
          kubectl apply -f ./k8s/jobs/db-migration-job.yaml
          # Ensure the job is monitored and completed


# .github/workflows/staging-deploy.yml
