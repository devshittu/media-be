name: Deploy to Staging on GKE

on:
  push:
    branches:
      - staging # Triggers the workflow on pushes to the staging branch
  workflow_dispatch: # Allows manual triggering of the workflow from GitHub UI

env:
  GCP_REGION: ${{ secrets.GKE_REGION }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  ARTIFACT_REGISTRY: ${{ secrets.ARTIFACT_REGISTRY }}
  DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}

jobs:
  setup:
    name: Setup and Configure Environment
    runs-on: ubuntu-latest
    # environment: staging
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}
          export_default_credentials: true

      - name: Install GKE gcloud auth plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Configure kubectl for GKE
        run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GKE_PROJECT }}

      - name: Create Namespace
        run: kubectl apply -f k8s/overlays/staging/namespace.yaml # Applies the namespace configuration

      - name: Set Default Namespace
        run: kubectl config set-context --current --namespace=staging # Sets the default namespace for subsequent kubectl commands
      - name: Debug secrets
        run: |
          echo "Length of DJANGO_SECRET_KEY: #${{ secrets.DJANGO_SECRET_KEY }} "
          echo "Length of POSTGRES_PASSWORD: #${{ secrets.POSTGRES_PASSWORD }} "
          # Add similar echo statements for other secrets

  build-and-push:
    name: Build and Push Docker Image
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GKE_KEY }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.ARTIFACT_REGISTRY }}/web-app-image:${{ github.sha }} -f Dockerfile.dev .
        # Make sure the Dockerfile.dev path is correct; add subdirectory path if it's not in the root

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west2-docker.pkg.dev

      - name: Push Docker image to Artifact Registry
        run: docker push ${{ secrets.ARTIFACT_REGISTRY }}/web-app-image:${{ github.sha }}

  database-update:
    name: Database Update
    needs: setup
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.event.pull_request.merged == true || github.event_name != 'pull_request') && contains(github.event.head_commit.message, '[db-update]')
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GKE_KEY }}

      - name: Run Database Migrations
        run: |
          kubectl apply -f ./k8s/jobs/db-migration-job.yaml
          # Ensure the job is monitored and completed

  deploy:
    name: Deploy to GKE
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      # - name: Authenticate with Google Cloud
      #   uses: google-github-actions/auth@v0.4.0
      #   with:
      #     credentials_json: ${{ secrets.GKE_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}
          export_default_credentials: true

      - name: Install GKE gcloud auth plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Configure kubectl for GKE
        run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GKE_PROJECT }}

      # - name: Update Kustomize image tag
      #   run: |
      #     sed -i "s|newTag: .*|newTag: ${{ github.sha }}|" ./k8s/overlays/staging/app/kustomization.yaml
      #     cat ./k8s/overlays/staging/app/kustomization.yaml  # Display the file to verify changes

      - name: Update Kustomize image tags
        run: |
          for file in ./k8s/overlays/staging/app/kustomization.yaml ./k8s/overlays/staging/celery/kustomization.yaml
          do
            sed -i "s|newTag: .*|newTag: ${{ github.sha }}|" $file
            echo "Updated $file:"
            cat $file  # Display the file to verify changes
            echo ""   # Add a newline for better readability in the logs
          done

      - name: Use variables
        env:
          REPOSITORY_VAR: ${{ vars.REPOSITORY_VAR }}
          ORGANIZATION_VAR: ${{ vars.ORGANIZATION_VAR }}
          OVERRIDE_VAR: ${{ vars.OVERRIDE_VAR }}
          POSTS_PER_PAGE: ${{ vars.POSTS_PER_PAGE }}
          # Setting an environment variable with the value of a configuration variable
          env_var: ${{ vars.ENV_CONTEXT_VAR }}

        run: |
          echo "repository variable : $REPOSITORY_VAR"
          echo "organization variable : $ORGANIZATION_VAR"
          echo "overridden variable : $OVERRIDE_VAR"
          echo "POSTS_PER_PAGE variable : $POSTS_PER_PAGE"
          echo "variable from shell environment : $env_var"
          echo "variable from shell environment vars.POSTGRES_HOST : ${{ vars.POSTGRES_HOST }}"
          echo "variables from shell environment vars.JOB_NAME : ${{ vars.JOB_NAME }}"
          echo "all variables from shell environment vars : ${{ vars }}"

      # TODO: Remove as it is for debugging
      - name: Display all environment variables
        run: |
          for var in $(compgen -e); do
            echo "$var = ${!var}"
          done

      - name: Display relevant environment variables
        run: |
          for var in $(compgen -e | grep '^APP_'); do
            echo "$var = ${!var}"
          done

      - name: Create Kubernetes Secrets
        run: |
          kubectl create secret generic web-app-secret \
            --from-literal=APP_NAME='${{ vars.APP_NAME }}' \
            --from-literal=APP_CODE_NAME='${{ vars.APP_CODE_NAME }}' \
            --from-literal=APP_VERSION='${{ vars.APP_VERSION }}' \
            --from-literal=APP_DESCRIPTION='${{ vars.APP_DESCRIPTION }}' \
            --from-literal=APP_FRONTEND_DOMAIN='${{ vars.APP_FRONTEND_DOMAIN }}' \
            --from-literal=APP_BASE_URL='${{ vars.APP_BASE_URL }}' \
            --from-literal=DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}' \
            --from-literal=DJANGO_DEBUG='${{ secrets.DJANGO_DEBUG }}' \
            --from-literal=DJANGO_ALLOWED_HOSTS='${{ vars.DJANGO_ALLOWED_HOSTS }}' \
            --from-literal=APP_MEDIA_ENVIRONMENT='${{ vars.APP_MEDIA_ENVIRONMENT }}' \
            --from-literal=TWILIO_ACCOUNT_SID='${{ secrets.TWILIO_ACCOUNT_SID }}' \
            --from-literal=TWILIO_AUTH_TOKEN='${{ secrets.TWILIO_AUTH_TOKEN }}' \
            --from-literal=TWILIO_PHONE_NUMBER='${{ secrets.TWILIO_PHONE_NUMBER }}' \
            --from-literal=SECRET_KEY='${{ secrets.SECRET_KEY }}' \
            --from-literal=POSTGRES_DB='${{ secrets.POSTGRES_DB }}' \
            --from-literal=POSTGRES_USER='${{ secrets.POSTGRES_USER }}' \
            --from-literal=POSTGRES_PASSWORD='${{ vars.POSTGRES_PASSWORD }}' \
            --from-literal=POSTGRES_HOST='${{ vars.POSTGRES_HOST }}' \
            --from-literal=POSTGRES_PORT='${{ vars.POSTGRES_PORT }}' \
            --from-literal=NEO4J_USERNAME='${{ secrets.NEO4J_USERNAME }}' \
            --from-literal=NEO4J_PASSWORD='${{ secrets.NEO4J_PASSWORD }}' \
            --from-literal=NEO4J_HOST='${{ vars.NEO4J_HOST }}' \
            --from-literal=NEO4J_PORT='7687' \
            --from-literal=REDIS_PASSWORD='${{ secrets.REDIS_PASSWORD }}' \
            --from-literal=CELERY_BROKER_URL='redis://redis-service:6379/0' \
            --from-literal=CELERY_RESULT_BACKEND='redis://redis-service:6379/0' \
            --from-literal=APP_MEDIA_EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend' \
            --from-literal=APP_MEDIA_EMAIL_HOST='smtp.gmail.com' \
            --from-literal=APP_MEDIA_EMAIL_USE_TLS='True' \
            --from-literal=APP_MEDIA_EMAIL_PORT='587' \
            --from-literal=APP_MEDIA_EMAIL_HOST_USER='mshittu.work@gmail.com' \
            --from-literal=APP_MEDIA_EMAIL_HOST_PASSWORD='${{ secrets.APP_MEDIA_EMAIL_HOST_PASSWORD }}' \
            --from-literal=APP_MEDIA_SENDGRID_API_KEY_NAME='media-app-access' \
            --from-literal=APP_MEDIA_SENDGRID_API_KEY_ID='${{ secrets.APP_MEDIA_SENDGRID_API_KEY_ID }}' \
            --from-literal=APP_MEDIA_SENDGRID_API_KEY='${{ secrets.APP_MEDIA_SENDGRID_API_KEY }}' \
            --from-literal=GS_BUCKET_NAME='${{ vars.GS_BUCKET_NAME }}' \
            --from-literal=GS_CREDENTIALS='${{ secrets.GS_CREDENTIALS }}' \
            --from-literal=GS_PROJECT_ID='${{ secrets.GS_PROJECT_ID }}' \
            --from-literal=POSTS_PER_PAGE='${{ vars.POSTS_PER_PAGE }}' \
            --from-literal=ANCESTORS_PER_PAGE='${{ vars.ANCESTORS_PER_PAGE }}' \
            --from-literal=DESCENDANTS_PER_PAGE='${{ vars.DESCENDANTS_PER_PAGE }}' \
            --namespace staging \
            --dry-run=client -o yaml | kubectl apply -f -

      # - name: Deploy to Kubernetes
      #   run: |
      #     gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GKE_PROJECT }}
      #     kustomize build ./k8s/overlays/staging/app | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GKE_PROJECT }}
          for dir in ./k8s/overlays/staging/app ./k8s/overlays/staging/celery
          do
            echo "Deploying configuration from $dir"
            kustomize build $dir | kubectl apply -f -
          done

      - name: Verify Deployment
        run: kubectl rollout status deployment/web-app -n staging
# .github/workflows/staging-deploy.yml
