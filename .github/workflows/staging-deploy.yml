name: Deploy to Staging on GKE

on:
  push:
    branches:
      - staging # This specifies that the workflow only runs on the staging branch

  workflow_dispatch:

env:
  GCP_REGION: ${{ secrets.GKE_REGION }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  ARTIFACT_REGISTRY: ${{ secrets.ARTIFACT_REGISTRY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}
          export_default_credentials: true

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Configure kubectl
        run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GKE_PROJECT }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.ARTIFACT_REGISTRY }}/web-app-image:${{ github.sha }} -f Dockerfile.dev .

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GKE_KEY }}

      - name: Configure Docker to use the gcloud command-line tool as a credential helper
        run: gcloud auth configure-docker europe-west2-docker.pkg.dev

      - name: Push Docker image to Google Artifact Registry
        run: docker push ${{ secrets.ARTIFACT_REGISTRY }}/web-app-image:${{ github.sha }}

      # deploy-to-gke:
      #   needs: build-and-push
      #   runs-on: ubuntu-latest
      #   steps:
      - name: List files in the k8s directory
        run: ls -R k8s/overlays/staging/app/
        working-directory: ${{ github.workspace }}

      # - name: Update Kustomize image tag
      #   run: |
      #     cd k8s/overlays/staging/app/
      #     kustomize edit set image web-app-image=${{ secrets.ARTIFACT_REGISTRY }}/web-app-image:${{ github.sha }}
      #     cat kustomization.yaml  # Display the file to verify changes

      - name: Update Kustomize image tag
        run: |
          sed -i "s|newTag: .*|newTag: ${{ github.sha }}|" ./k8s/overlays/staging/app/kustomization.yaml
          cat ./k8s/overlays/staging/app/kustomization.yaml  # Display the file to verify changes

      - name: Check kubectl configuration
        run: kubectl cluster-info

      - name: Create Kubernetes Secrets
        run: |
          kubectl create secret generic web-app-secret \
            --from-literal=APP_NAME='Aproko' \
            --from-literal=APP_CODE_NAME='media-be' \
            --from-literal=APP_VERSION='0.0.2' \
            --from-literal=APP_DESCRIPTION='This is a brief description of the app.' \
            --from-literal=APP_FRONTEND_DOMAIN='http://127.0.0.1:3000/' \
            --from-literal=APP_BASE_URL='https://api.mediaapp.local' \
            --from-literal=DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}' \
            --from-literal=DJANGO_DEBUG='True' \
            --from-literal=TWILIO_ACCOUNT_SID='${{ secrets.TWILIO_ACCOUNT_SID }}' \
            --from-literal=TWILIO_AUTH_TOKEN='${{ secrets.TWILIO_AUTH_TOKEN }}' \
            --from-literal=TWILIO_PHONE_NUMBER='${{ secrets.TWILIO_PHONE_NUMBER }}' \
            --from-literal=SECRET_KEY='${{ secrets.SECRET_KEY }}' \
            --from-literal=POSTGRES_DB='mediabedb' \
            --from-literal=POSTGRES_USER='mediabeuser' \
            --from-literal=POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --from-literal=POSTGRES_HOST='34.147.210.47' \
            --from-literal=POSTGRES_PORT='5432' \
            --from-literal=NEO4J_USERNAME='neo4j' \
            --from-literal=NEO4J_PASSWORD='${{ secrets.NEO4J_PASSWORD }}' \
            --from-literal=NEO4J_HOST='db-neo4j-service' \
            --from-literal=NEO4J_PORT='7687' \
            --from-literal=CELERY_BROKER_URL='redis://redis-service:6379/0' \
            --from-literal=CELERY_RESULT_BACKEND='redis://redis-service:6379/0' \
            --from-literal=APP_MEDIA_EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend' \
            --from-literal=APP_MEDIA_EMAIL_HOST='smtp.gmail.com' \
            --from-literal=APP_MEDIA_EMAIL_USE_TLS='True' \
            --from-literal=APP_MEDIA_EMAIL_PORT='587' \
            --from-literal=APP_MEDIA_EMAIL_HOST_USER='mshittu.work@gmail.com' \
            --from-literal=APP_MEDIA_EMAIL_HOST_PASSWORD='${{ secrets.APP_MEDIA_EMAIL_HOST_PASSWORD }}' \
            --from-literal=APP_MEDIA_SENDGRID_API_KEY_NAME='media-app-access' \
            --from-literal=APP_MEDIA_SENDGRID_API_KEY_ID='${{ secrets.APP_MEDIA_SENDGRID_API_KEY_ID }}' \
            --from-literal=APP_MEDIA_SENDGRID_API_KEY='${{ secrets.APP_MEDIA_SENDGRID_API_KEY }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to GKE
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GKE_PROJECT }}
          kustomize build ./k8s/overlays/staging/app | kubectl apply -f -

      - name: Verify Deployment
        run: kubectl rollout status deployment/web-app-deployment
# .github/workflows/staging-deploy.yml
