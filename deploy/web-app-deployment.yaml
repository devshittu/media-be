apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-app
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
      labels:
        app: web-app
    spec:
      # initContainers:
      # - name: setup
      #   image: web-app-image:0.0.1
      #   # command: ["/bin/sh", "-c", "/code/deploy/scripts/init-web-app.sh"]
        
      #   command: ["/bin/sh", "-c"]
      #   args:
      #   - |
      #     # Wait for PostgreSQL to be ready
      #     while ! nc -z db-postgres 5432; do
      #       echo "Waiting for PostgreSQL database..."
      #       sleep 1
      #     done
          
      #     # Wait for Neo4j to be ready
      #     while ! nc -z db-neo4j 7687; do
      #       echo "Waiting for Neo4j database..."
      #       sleep 1
      #     done
          
      #     # Run Django setup commands
      #     python manage.py migrate &&
      #     python manage.py install_labels &&
      #     python manage.py autoseed &&
      #     echo "from django.contrib.auth.models import User; User.objects.create_superuser('test@test.co', 'commonPassword=1')" | python manage.py shell
      #   envFrom:
      #   - configMapRef:
      #       name: web-app-config
      #   - secretRef:
      #       name: web-app-secret
      #   volumeMounts:
      #   - mountPath: /code
      #     name: web-app-pvc
      containers:
        - name: web-app
          image: web-app-image:0.0.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
          envFrom:
          - configMapRef:
              name: web-app-config
          - secretRef:
              name: web-app-secret
      restartPolicy: Always
      volumes:
        - name: web-app-pvc
          persistentVolumeClaim:
            claimName: web-app-pvc
        - name: media-volume
          persistentVolumeClaim:
            claimName: media-volume


---

apiVersion: v1
kind: Service
metadata:
  name: web-app-svc
spec:
  type: NodePort
  selector:
    app: web-app
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000

# deploy/web-app-deployment.yaml