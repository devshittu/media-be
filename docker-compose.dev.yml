version: "3.9"

services:
  web:
    build: .
    # command: gunicorn core.wsgi -b 0.0.0.0:8000  # new
    command: python /code/manage.py runserver 0.0.0.0:8000
    # command: python /code/manage.py runsslserver 0.0.0.0:8000
    volumes:
      - .:/code
      - media_volume:/code/media # Add this line
    ports:
      - 8000:8000
    depends_on:
      - db
      - neo4j
    networks:
      - my_media_network

    # environment:
    #   - "DJANGO_SECRET_KEY=django-insecure-hv1(e0r@v4n4m6gqdz%dn(60o=dsy8&@0_lbs8p-v3u^bs4)xl"
    #   - "DJANGO_DEBUG=True"
    # - "DJANGO_SECURE_SSL_REDIRECT=False"  # new
    # - "DJANGO_SECURE_HSTS_SECONDS=0"  # new
    # - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=False"  # new
    # - "DJANGO_SECURE_HSTS_PRELOAD=False"  # new
    # - "DJANGO_SESSION_COOKIE_SECURE=False"  # new
    # - "DJANGO_CSRF_COOKIE_SECURE=False"  # new

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      - my_media_network

  celery:
    build: .
    command: celery -A core worker --loglevel=info
    volumes:
      - .:/code
    depends_on:
      - db
      - redis
    networks:
      - my_media_network

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
      - "POSTGRES_DB=mediabedb"
      - "POSTGRES_USER=mediabeuser"
      - "POSTGRES_PASSWORD=mediabepassword"
    networks:
      - my_media_network

  neo4j:
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/password
    networks:
      - my_media_network

  nginx:
    build:
        context: .
        dockerfile: Dockerfile.nginx
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-conf/nginx.conf:/etc/nginx/nginx.conf
      - /Users/mshittu/programming-projects/server-services/local-certs:/etc/nginx/certs
      - ./nginx-conf/start-nginx.sh:/start-nginx.sh  # Mount the start-up script into the container
    command: /start-nginx.sh  # Override the default command to use your script
    depends_on:
      - web
    networks:
      - my_media_network

  media-fe:
    container_name: media-fe
    build:
      context: /Users/mshittu/programming-projects/javascript/react/media-fe/
      dockerfile: dev.Dockerfile

    # Set environment variables directly in the docker-compose file
    environment:
      ENV_VARIABLE: ${ENV_VARIABLE}
      NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}

    # Set envrionment variables based on the .env file
    env_file:
      - /Users/mshittu/programming-projects/javascript/react/media-fe/.env

    volumes:
      - /Users/mshittu/programming-projects/javascript/react/media-fe/src:/app/src
      - /Users/mshittu/programming-projects/javascript/react/media-fe/public:/app/public
      # - /Users/mshittu/Library/Application Support/mkcert/rootCA.pem:/usr/local/share/ca-certificates/rootCA.crt

    restart: always
    ports:
      - 3000:3000
    networks:
      - my_media_network
    depends_on:
      - web

volumes:
  postgres_data:
  media_volume:
  neo4j_data:
  neo4j_logs:

networks:
  my_media_network:
    external: true

# docker-compose.dev.yml
