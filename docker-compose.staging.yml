services:
  nginx-proxy:
    build:
      context: ./nginx-proxy
      dockerfile: Dockerfile
    # image: jwilder/nginx-proxy
    image: devshittu/nginx-proxy:latest # Use the custom image
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - letsencrypt-certs:/etc/nginx/certs
      - letsencrypt-vhost-d:/etc/nginx/vhost.d
      - letsencrypt-html:/usr/share/nginx/html
      - static_volume:/home/app/web/staticfiles # Mount static files
      - media_volume:/home/app/web/mediafiles
      - ./nginx-proxy/static.conf:/etc/nginx/vhost.d/default_location
      # - ./nginx-conf/custom-nginx/static.conf:/etc/nginx/vhost.d/static_location  # Correct mount for custom config
    networks:
      - my_media_network

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt-certs:/etc/nginx/certs
      - letsencrypt-vhost-d:/etc/nginx/vhost.d
      - letsencrypt-html:/usr/share/nginx/html
      - ./nginx-proxy/static.conf:/etc/nginx/vhost.d/default_location
      - static_volume:/home/app/web/staticfiles # Mount static files
      # - ./nginx-conf/custom-nginx:/etc/nginx/custom-conf.d
    environment:
      - DEFAULT_EMAIL=devshittu@gmail.com
      - NGINX_PROXY_CONTAINER=nginx-proxy
      - DEBUG=true
      - ACME_CA_URI=https://acme-staging-v02.api.letsencrypt.org/directory # Use Let's Encrypt staging
    networks:
      - my_media_network

  web-app:
    container_name: backend-app
    # build: .
    build:
      context: .
      dockerfile: Dockerfile.prod
    image: devshittu/mediaapp:web-app-latest
    command: gunicorn core.wsgi -b 0.0.0.0:8000 # new
    # command: python /home/app/web/manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
      - media_volume:/home/app/web/mediafiles
      - static_volume:/home/app/web/staticfiles
    ports:
      - 8000:8000
    depends_on:
      - db-postgres
      - db-neo4j
      # - minio
      # - createbucket
    environment:
      - VIRTUAL_HOST=api.staging.gong.ng,www.api.staging.gong.ng
      - LETSENCRYPT_HOST=api.staging.gong.ng,www.api.staging.gong.ng
      - LETSENCRYPT_EMAIL=devshittu@gmail.com
    networks:
      - my_media_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    env_file:
      - .env.docker-compose

  celery:
    container_name: celery-engine
    image: devshittu/mediaapp:web-app-latest

    build:
      context: .
      dockerfile: Dockerfile.prod
    command: celery -A core worker --loglevel=info
    volumes:
      - .:/code
    depends_on:
      - db-postgres
      - redis
    environment:
      - VIRTUAL_HOST=api.staging.gong.ng
      - LETSENCRYPT_HOST=api.staging.gong.ng
      - LETSENCRYPT_EMAIL=devshittu@gmail.com
    networks:
      - my_media_network
    env_file:
      - .env.docker-compose

  redis:
    container_name: db-redis
    image: "redis:alpine"
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - my_media_network

  db-postgres:
    container_name: db-postgresql
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
      - "POSTGRES_DB=mediabedb"
      - "POSTGRES_USER=mediabeuser"
      - "POSTGRES_PASSWORD=mediabepassword"
    networks:
      - my_media_network

  db-neo4j:
    container_name: db-neo4j
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/password
    networks:
      - my_media_network
volumes:
  postgres_data:
  media_volume:
  neo4j_data:
  neo4j_logs:
  redis_data:
  # frontend-node-modules:

  letsencrypt-certs:
  letsencrypt-vhost-d:
  letsencrypt-html:
  static_volume: # Add this line
networks:
  my_media_network:
    external: true
# docker-compose.staging.yml

# /Users/mshittu/programming-projects/python/django/media-be/docker-compose.staging.yml

#  inspration to solution:
# https://stackoverflow.com/questions/54571819/serving-static-files-from-jwilder-nginx-proxy
